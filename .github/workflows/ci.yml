name: verify project

on:
  push:
    branches: [ trunk ]
  pull_request:
    branches: [ trunk ]

jobs:
  install:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v2
      with:
        path: vendor
        key: composer-lock-${{ hashFiles('**/composer.lock') }}

    - name: Install composer dependencies
      if: steps.composer-cache.outputs.cache-hit != 'true'
      run: echo 'DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"' > .env.local && composer install --prefer-dist --no-progress --no-suggest

    - name: Cache phive packages
      id: phive-tools-cache
      uses: actions/cache@v2
      with:
        path: tools
        key: phive-tools-${{ hashFiles('**/phive.xml') }}

    - name: Install phive tools
      if: steps.phive-tools-cache.outputs.cache-hit != 'true'
      run: wget -O phive https://phar.io/releases/phive.phar && chmod +x phive && ./phive install --trust-gpg-keys 4AA394086372C20A,12CE0F1D262429A5,31C7E470E2138192 && chmod -R +x ./tools/

    - name: 'Tar project'
      run: tar -cf project.tar .

    - uses: actions/upload-artifact@v2
      with:
        name: installed-project
        path: project.tar

  phplint:
    needs: install
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: installed-project

    - name: Untar project.
      run:  tar -xf project.tar

    - name: Run php lint
      run: find ./src/ ./tests/ -type f -name '*.php' -print0 | xargs -0 -n1 -P4 php -l -n | (! grep -v "No syntax errors detected" )

  phpcs:
    needs: phplint
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: installed-project

    - name: Untar project.
      run:  tar -xf project.tar

    - name: Run phpcs
      run: ./tools/phpcs --standard=PSR12 --extensions=php --ignore=*/Kernel.php ./src/

  test:
    needs: phplint
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: installed-project

    - name: Untar project.
      run:  tar -xf project.tar

    - name: Cache npm packages
      id: npm-cache
      uses: actions/cache@v2
      with:
        path: node_modules
        key: npm-${{ hashFiles('**/package-lock.json') }}

    - uses: actions/setup-node@v2
    - name: Install npm package
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm i

    - name: Install assets
      run: npm run dev

    - name: Run PHPUnit test
      run: ./bin/console doctrine:database:create -e test && ./bin/console doctrine:migrations:migrate --no-interaction -e test && ./tools/phpunit -c ./build/phpunit.xml

  static-analysis:
    needs: phplint
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: installed-project

    - name: Untar project.
      run:  tar -xf project.tar

    - name: Run Psalm
      run: cd build/ && ../tools/psalm --shepherd --no-cache
